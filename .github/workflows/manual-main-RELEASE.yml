name: manual-main-RELEASE

env:
  GPG_KEY_ID_GITHUB_TECHUSER: '${{ secrets.GPG_KEY_ID_GITHUB_TECHUSER }}'
  TECH_USER_USERNAME: ${{ vars.TECH_USER_USERNAME }}
  TECH_USER_EMAIL: ${{ vars.TECH_USER_EMAIL }}
  PROJECT_NAME: ${GITHUB_REPOSITORY#*/}

on:
  workflow_dispatch:
    inputs:
      comment:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Comment for release'
        # Default value if no value is explicitly provided
        default: 'Start MAIN release from WEB UI'
        # Input has to be provided for the workflow to run
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  manual-main-RELEASE:
    name: Manual main release

    # run only on main
    if: github.ref_name == 'main'

    runs-on: ubuntu-latest

    steps:
      ###############
      # pre release
      ###############
      - name: Import GPG key
        # GPG private key exported with armor (start: '-----BEGIN PGP PRIVATE KEY BLOCK-----') this is the whole content base64 encoded, inserted as the secrets content
        # decode the base64 encoded private key and insert it
        run: echo "${{ secrets.GPG_SIGNING_KEY_GITHUB_TECHUSER }}" | base64 --decode | gpg --batch --import

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          # The content is a SSH key with PEM format (start with '-----BEGIN RSA PRIVATE KEY-----')
          key: ${{ secrets.SSH_PRIVATE_KEY_GITHUB_TECHUSER }}
          name: id_rsa # optional
          known_hosts: ${{ secrets.KNOWN_HOSTS }} # jelenleg ures a tartalma
          # config: ${{ secrets.CONFIG }} # ssh_config; optional

      - name: Configure GIT for signed commit
        run: |
          git config --global user.name "${{ env.TECH_USER_USERNAME }}"
          git config --global user.email "${{ env.TECH_USER_EMAIL }}"
          git config --global user.signingkey "${{ env.GPG_KEY_ID_GITHUB_TECHUSER }}"
          git config --global commit.gpgsign true
          git config --global tag.gpgSign true

      - name: Checkout main/master
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Get current version from .env
        id: prepare
        shell: bash
        run: |
          
          CURRENT_VERSION=$(sed -rn 's/(^VERSION=)([^-]+)(-SNAPSHOT|)$/\2/p' .env)
          echo current version is ${CURRENT_VERSION}
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

          RELEASE_BRANCH_NAME=release/${{ env.PROJECT_NAME }}-${CURRENT_VERSION%.*}.x
          echo new release branch name is $RELEASE_BRANCH_NAME
          echo "RELEASE_BRANCH_NAME=${RELEASE_BRANCH_NAME}" >> $GITHUB_OUTPUT

          GIT_TAG=${{ env.PROJECT_NAME }}-${CURRENT_VERSION}
          echo "GIT_TAG=${GIT_TAG}" >> $GITHUB_OUTPUT
          echo git tag will be $GIT_TAG

          NEXT_VERSION=$(echo $CURRENT_VERSION |  awk -F'.' '{print $1"."$2"."$3+1}' |  sed s/[.]$//)-SNAPSHOT
          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_OUTPUT
          echo next version will be $NEXT_VERSION
          
          MR_BRANCH_NAME=feature/${GIT_TAG}-release
          echo "MR_BRANCH_NAME=${MR_BRANCH_NAME}"
          echo "MR_BRANCH_NAME=${MR_BRANCH_NAME}" >> $GITHUB_OUTPUT

      - name: Create release branch
        id: createReleaseBranch
        shell: bash
        run: |
          git checkout -b ${{steps.prepare.outputs.RELEASE_BRANCH_NAME}} refs/remotes/origin/${{ github.ref_name }}
          git push --set-upstream origin ${{steps.prepare.outputs.RELEASE_BRANCH_NAME}}
          echo "${{steps.prepare.outputs.RELEASE_BRANCH_NAME}} branch created."

      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: ${{steps.prepare.outputs.RELEASE_BRANCH_NAME}}

      - name: Remove SNAPSHOT postfix from version and commit/push it to release branch
        id: removeSnapshot
        shell: bash
        run: |
          sed -i -r "s/^[#]*\s*VERSION=.*/VERSION=${{steps.prepare.outputs.CURRENT_VERSION}}/" .env
          echo ".env file VERSION property successfully updated to '${{steps.prepare.outputs.CURRENT_VERSION}}'"

          git commit -a -m "Bump version to ${{steps.prepare.outputs.CURRENT_VERSION}}"
          git push --atomic origin ${{steps.prepare.outputs.RELEASE_BRANCH_NAME}}

      ###############
      ## post release
      ###############
      - name: Create tag
        id: createTag
        shell: bash
        run: |
          git tag -a ${{steps.prepare.outputs.GIT_TAG}} -m "Release  ${{steps.prepare.outputs.GIT_TAG}}"
          echo "${{steps.prepare.outputs.GIT_TAG}} tag created."

      - name: Bump next MINOR version and commit/push it to release branch
        id: bumpRelease
        shell: bash
        run: |
          sed -i -r "s/^[#]*\s*VERSION=.*/VERSION=${{steps.prepare.outputs.NEXT_VERSION}}/" .env
          echo ".env file VERSION property successfully updated ('${{steps.prepare.outputs.CURRENT_VERSION}}' -> '${{steps.prepare.outputs.NEXT_VERSION}}')"

          git commit -a -m "Bump version to ${{steps.prepare.outputs.NEXT_VERSION}}"
          git push --atomic origin ${{steps.prepare.outputs.RELEASE_BRANCH_NAME}} ${{steps.prepare.outputs.GIT_TAG}}

      - name: Checkout main/master
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Create bump version branch
        id: createBumpBranch
        shell: bash
        run: |
          git checkout -b ${{ steps.prepare.outputs.MR_BRANCH_NAME }} refs/remotes/origin/${{ github.ref_name }}
          git push --set-upstream origin ${{steps.prepare.outputs.MR_BRANCH_NAME}}
          echo "${{ steps.prepare.outputs.MR_BRANCH_NAME }} branch created."

      - name: Create bump MAJOR version branch
        id: bumpbranch
        shell: bash
        run: |
          NEXT_VERSION=$(echo ${{ steps.prepare.outputs.CURRENT_VERSION }} |  awk -F'.' '{print $1"."$2+1"."0}' |  sed s/[.]$//)-SNAPSHOT
          sed -i -r "s/^[#]*\s*VERSION=.*/VERSION=$NEXT_VERSION/" .env

          TARGET_BRANCH_NEXT_VERSION=$(sed -rn 's/^VERSION=([^\n]+)$/\1/p' .env)
          COMMIT_MESSAGE="Bump version to $TARGET_BRANCH_NEXT_VERSION"
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_OUTPUT

          git add .
          git commit -a -m "${COMMIT_MESSAGE}"
          git push --atomic origin ${{ steps.prepare.outputs.MR_BRANCH_NAME }}
          echo next version on ${{ github.ref_name }} is $TARGET_BRANCH_NEXT_VERSION
      

      # This step creates a pull request between the current branch and the base branch.
      - name: Create Pull Request
        shell: bash
        env:
          GH_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        run: |
          gh pr create --base ${{ github.ref_name }} --fill-verbose --title '${{steps.bumpbranch.outputs.COMMIT_MESSAGE}}'


