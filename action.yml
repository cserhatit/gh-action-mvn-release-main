# Copyright (c) AUTHORS
# SPDX-License-Identifier: Apache2
name: 'Maven-manual-release-main'
description: 'Maven manual release from main branch (major version release)'
branding:
  icon: 'arrow-right-circle'
  color: 'gray-dark'
inputs:
  GITHUB_TOKEN:
    description: 'GITHUB_TOKEN or a `repo` scoped Personal Access Token (PAT)'
    default: ${{ github.token }}
  NEXUS_USER:
    description: 'Nexus user for upload artifacts to nexus'
    required: true
  NEXUS_PASSWORD:
    description: 'Password of nexus user for upload artifacts to nexus'
    required: true
  ARTIFACT_STORE_SERVER_ID:
    description: 'Value of the distributionManagement/repository/id field of the pom.xml'
    required: true
  SETTINGS_XML_PATH:
    description: 'settings.xml path in repository, for example: .github/.m2/settings.xml (in repository root, there is a .github folder ...'
    default: '.github/.m2/settings.xml'
  GPG_KEY_ID_GITHUB_TECHUSER:
    description: 'Gpg key id of technical user'
    required: true
  GPG_SIGNING_KEY_GITHUB_TECHUSER:
    description: 'Gpg private key of technical user with base64 decode format'
    required: true
  SSH_PRIVATE_KEY_GITHUB_TECHUSER:
    description: 'Ssh private key of technical user in PEM foramat'
  KNOWN_HOSTS:
    description: 'Known host at ssh key install'
    required: false
  TECH_USER_USERNAME:
    description: 'Username of technical user'
    required: true
  TECH_USER_EMAIL:
    description: 'Email address of technical user'
    required: true
  JAVA_VERSION:
    description: 'Java version (default is 17)'
    required: false
    default: '17'
  JAVA_DISTRIBUTION:
    description: 'Java distribution (default is temurin)'
    required: false
    default: 'temurin'
runs:
  using: 'composite'
  steps:
    # Runs a single command using the runners shell
    - name: Print
      shell: bash
      run: |
        echo "github.event.inputs.comment ${{ github.event.inputs.comment }}"
        echo "github.ref: ${{ github.ref }}"
        echo "github.event.ref: ${{ github.event.ref }}"
        echo "github.repository: ${{ github.repository }}"
        echo "github.workspace: ${{ github.workspace }}"
        echo "NEXUS_USER: '${{ env.NEXUS_USER }}'
        echo "NEXUS_PASSWORD: '${{ env.NEXUS_PASSWORD }}'
        echo "GPG_KEY_ID_GITHUB_TECHUSER: '${{ env.GPG_KEY_ID_GITHUB_TECHUSER }}'"
        echo "TECH_USER_USERNAME: '${{ env.TECH_USER_USERNAME }}'"
        echo "TECH_USER_EMAIL: '${{ env.TECH_USER_EMAIL }}'"
        echo "JAVA_VERSION: '${{ env.JAVA_VERSION }}'"
        echo "JAVA_DISTRIBUTION: '${{ env.JAVA_DISTRIBUTION }}'"

    - name: Check branch (workflow can run only main/master branch)
      shell: bash
      run: |
        if [[ "${{ github.ref }}" != "refs/heads/main" && "${{ github.ref }}" != "refs/heads/master" ]]; then
            echo "⛔ workflow can only be run on the main/master branch!"
            exit 1
        fi

    - name: Import GPG key
      shell: bash
      # GPG private key, which is exported with armor (start with: '-----BEGIN PGP PRIVATE KEY BLOCK-----') and it is encoded with base64, and stored in secrets
      # the private key is decoded with base64 and it is imported
      run: |
        echo "${{ env.GPG_SIGNING_KEY_GITHUB_TECHUSER }}" | base64 --decode | gpg --batch --import

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        # Private SSH key in PEM format (start with: '-----BEGIN RSA PRIVATE KEY-----')
        key: ${{ env.SSH_PRIVATE_KEY_GITHUB_TECHUSER }}
        name: id_rsa
        known_hosts: ${{ env.KNOWN_HOSTS }}


    - name: Configure GIT for signed commit
      shell: bash
      run: |
        git config --global user.name "${{ env.TECH_USER_USERNAME }}"
        git config --global user.email "${{ env.TECH_USER_EMAIL }}"
        git config --global user.signingkey "${{ env.GPG_KEY_ID_GITHUB_TECHUSER }}"
        git config --global commit.gpgsign true
        git config --global tag.gpgSign true

    - name: Checkout main/master
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}


    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        cache: 'maven'
        server-id: ${{ env.ARTIFACT_STORE_SERVER_ID }} # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: USERNAME # env variable for username in deploy
        server-password: TOKEN # env variable for token in deploy

    - name: Maven release prepare DryRun and release branch
      id: preset
      shell: bash
      run: |
        mvn -B -s $GITHUB_WORKSPACE/.github/.m2/settings.xml  release:prepare -DdryRun=true
        
        SCM_TAG=`cat release.properties | grep -w "scm.tag" | cut -d'=' -f2`
        echo "SCM_TAG=${SCM_TAG}" 
        echo "SCM_TAG=${SCM_TAG}" >> $GITHUB_OUTPUT
        
        mvn -B release:clean --file pom.xml
        
        RELEASE_BRANCH_NAME=release/${SCM_TAG%.*}.x
        echo "RELEASE_BRANCH_NAME=${RELEASE_BRANCH_NAME}"
        echo "RELEASE_BRANCH_NAME=${RELEASE_BRANCH_NAME}" >> $GITHUB_OUTPUT
        
        echo new release branch name is ${RELEASE_BRANCH_NAME}
        MR_BRANCH_NAME=feature/${SCM_TAG}-release
        echo "MR_BRANCH_NAME=${MR_BRANCH_NAME}"
        echo "MR_BRANCH_NAME=${MR_BRANCH_NAME}" >> $GITHUB_OUTPUT


    - name: Create release branch
      id: createreleasebranch
      shell: bash
      run: |
        git checkout -b ${{steps.preset.outputs.RELEASE_BRANCH_NAME}} main
        git push --set-upstream origin ${{steps.preset.outputs.RELEASE_BRANCH_NAME}}

    - name: Checkout release branch
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.preset.outputs.RELEASE_BRANCH_NAME }}

    - name: Maven release PREPARE
      shell: bash
      run: |
        mvn -B release:prepare

    - name: Maven release PERFORM
      shell: bash
      env:
        USERNAME: ${{ env.TECH_USER_USERNAME }}
        TOKEN: ${{ env.GITHUB_TOKEN }}
      run: mvn -B -s $GITHUB_WORKSPACE/${{ env.SETTINGS_XML_PATH}}  release:perform

    - name: Checkout main/master
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}


    - name: Bump version branch
      id: bumpbranch
      shell: bash
      run: |
        NEXT_MASTER_VERSION=$(echo  ${{steps.preset.outputs.SCM_TAG}} |  awk -F'.' '{print $1"."$2+1"."0}' |  sed s/[.]$//)
        TARGET_BRANCH_NEXT_VERSION=$(echo $NEXT_MASTER_VERSION | rev | cut -d '-' -f1 | rev)-SNAPSHOT
        echo next master branch version is $TARGET_BRANCH_NEXT_VERSION
        mvn -B release:update-versions -DdevelopmentVersion=$TARGET_BRANCH_NEXT_VERSION
        
        COMMIT_MESSAGE="Bump version to $TARGET_BRANCH_NEXT_VERSION"
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE"
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
        
        git add .
        git commit -a -m "$COMMIT_MESSAGE"
        echo next version on main is $TARGET_BRANCH_NEXT_VERSION

    # Ez a step az előzőeket pusholja a branch-be megadott branchre, és az mr-t a base-re írja ki.
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v6.0.1
      with:
        commit-message: ${{steps.bumpbranch.outputs.COMMIT_MESSAGE}}
        branch:  ${{steps.preset.outputs.MR_BRANCH_NAME}}
        title: ${{steps.bumpbranch.outputs.COMMIT_MESSAGE}}
        committer: ${{ env.TECH_USER_USERNAME }} <${{ env.TECH_USER_EMAIL }}>
        author: ${{ env.TECH_USER_USERNAME }} <${{ env.TECH_USER_EMAIL }}>
        base: main
        delete-branch: true
