# Copyright (c) AUTHORS
# SPDX-License-Identifier: Apache2
name: 'Maven-manual-release-main'
description: 'Maven manual release from main branch (major version release)'
branding:
  icon: 'arrow-right-circle'
  color: 'gray-dark'
inputs:
  GITHUB_TOKEN:
    description: 'GITHUB_TOKEN or a `repo` scoped Personal Access Token (PAT) fro create PR'
    default: ${{ github.token }}
  ARTIFACT_STORE_SERVER_ID:
    description: 'Value of the distributionManagement/repository/id field of the pom.xml'
    required: true
  SETTINGS_XML_PATH:
    description: 'settings.xml path in repository, for example: .github/.m2/settings.xml (in repository root, there is a .github folder ...'
    required: false
    default: '.github/.m2/settings.xml'
  GPG_KEY_ID_GITHUB_TECHUSER:
    description: 'Gpg key id of technical user'
    required: true
  GPG_SIGNING_KEY_GITHUB_TECHUSER:
    description: 'Gpg private key of technical user with base64 decode format'
    required: true
  SSH_PRIVATE_KEY_GITHUB_TECHUSER:
    description: 'Ssh private key of technical user in PEM foramat'
    required: true
  TECH_USER_USERNAME:
    description: 'Username of technical user'
    required: true
  TECH_USER_PASSWORD:
    description: 'Password of technical user'
    required: true
  TECH_USER_EMAIL:
    description: 'Email address of technical user'
    required: true
  JAVA_VERSION:
    description: 'Java version (default is 17)'
    required: false
    default: '17'
  JAVA_DISTRIBUTION:
    description: 'Java distribution (default is temurin)'
    required: false
    default: 'temurin'
runs:
  using: 'composite'
  steps:
    # Runs a single command using the runners shell
    - name: Print
      shell: bash
      run: |
        echo "github.event.inputs.comment ${{ github.event.inputs.comment }}"
        echo "github.ref_name: ${{ github.ref_name }}"
        echo "github.event.ref: ${{ github.event.ref }}"
        echo "github.repository: ${{ github.repository }}"
        echo "github.workspace: ${{ github.workspace }}"
        echo "GPG_KEY_ID_GITHUB_TECHUSER: '${{ inputs.GPG_KEY_ID_GITHUB_TECHUSER }}'"
        echo "TECH_USER_USERNAME: '${{ inputs.TECH_USER_USERNAME }}'"
        echo "TECH_USER_PASSWORD: '${{ inputs.TECH_USER_PASSWORD }}'"
        echo "TECH_USER_EMAIL: '${{ inputs.TECH_USER_EMAIL }}'"
        echo "JAVA_VERSION: '${{ inputs.JAVA_VERSION }}'"
        echo "JAVA_DISTRIBUTION: '${{ inputs.JAVA_DISTRIBUTION }}'"

    - name: Check branch (workflow can run only main/master branch)
      id: precheck
      shell: bash
      run: |
        if [[ "${{ github.ref_name }}" == "main" || "${{ github.ref_name }}" == "master"  ]]; then
          echo "ðŸš€ Start ${{ github.ref_name }} release..."
          echo "VERSION_TYPE=MAJOR" 
          echo "VERSION_TYPE=${VERSION_TYPE}" >> $GITHUB_OUTPUT
        elif [[ contains('"release/", ${{ github.ref_name }}") ]]; then
          echo "ðŸš€ Start ${{ github.ref_name }} release..."
          echo "VERSION_TYPE=MINOR" 
          echo "VERSION_TYPE=${VERSION_TYPE}" >> $GITHUB_OUTPUT
        else 
          echo "â›” workflow can only be run on the main/master branch!"
          exit 1
        fi

    - name: Import GPG key
      shell: bash
      # GPG private key, which is exported with armor (start with: '-----BEGIN PGP PRIVATE KEY BLOCK-----') and it is encoded with base64, and stored in secrets
      # the private key is decoded with base64 and it is imported
      run: echo "${{ inputs.GPG_SIGNING_KEY_GITHUB_TECHUSER }}" | base64 --decode | gpg --batch --import

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        # Private SSH key in PEM format (start with: '-----BEGIN RSA PRIVATE KEY-----')
        key: ${{ inputs.SSH_PRIVATE_KEY_GITHUB_TECHUSER }}
        name: id_rsa
        known_hosts: unnecessary

    - name: Configure GIT for signed commit
      shell: bash
      run: |
        git config --global user.name "${{ inputs.TECH_USER_USERNAME }}"
        git config --global user.email "${{ inputs.TECH_USER_EMAIL }}"
        git config --global user.signingkey "${{ inputs.GPG_KEY_ID_GITHUB_TECHUSER }}"
        git config --global commit.gpgsign true
        git config --global tag.gpgSign true

    - name: Checkout ${{ github.ref_name }}
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref_name }}

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: ${{ inputs.JAVA_VERSION }}
        distribution: ${{ inputs.JAVA_DISTRIBUTION }}
        cache: 'maven'
        server-id: ${{ inputs.ARTIFACT_STORE_SERVER_ID }} # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: USERNAME # env variable for username in deploy
        server-password: TOKEN # env variable for token in deploy

    - name: Maven release prepare DryRun and release branch
      id: prepare
      shell: bash
      run: |
        mvn -B -s $GITHUB_WORKSPACE/${{ inputs.SETTINGS_XML_PATH}} release:prepare -DdryRun=true
        
        if [[ "${{steps.precheck.outputs.VERSION_TYPE}}" == "MAJOR" ]]
          SCM_TAG=`cat release.properties | grep -w "scm.tag" | cut -d'=' -f2`
          echo "SCM_TAG=${SCM_TAG}" 
          echo "SCM_TAG=${SCM_TAG}" >> $GITHUB_OUTPUT
        fi
        
        mvn -B release:clean --file pom.xml
        
        if [[ "${{steps.precheck.outputs.VERSION_TYPE}}" == "MAJOR" ]]
          RELEASE_BRANCH_NAME=release/${SCM_TAG%.*}.x
          echo "RELEASE_BRANCH_NAME=${RELEASE_BRANCH_NAME}"
          echo "RELEASE_BRANCH_NAME=${RELEASE_BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo new release branch name is ${RELEASE_BRANCH_NAME}
          
          MR_BRANCH_NAME=feature/${SCM_TAG}-release
          echo "MR_BRANCH_NAME=${MR_BRANCH_NAME}"
          echo "MR_BRANCH_NAME=${MR_BRANCH_NAME}" >> $GITHUB_OUTPUT
        fi
        

    - name: Create release branch
      id: createreleasebranch
      if: ${{steps.precheck.outputs.VERSION_TYPE}} == 'MAJOR'
      shell: bash
      run: |
        git checkout -b ${{steps.prepare.outputs.RELEASE_BRANCH_NAME}} refs/remotes/origin/${{ github.ref_name }}
        git push --set-upstream origin ${{steps.prepare.outputs.RELEASE_BRANCH_NAME}}
        echo "${{steps.prepare.outputs.RELEASE_BRANCH_NAME}} branch created."

    - name: Checkout release branch
      if: ${{steps.precheck.outputs.VERSION_TYPE}} == 'MAJOR'
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.prepare.outputs.RELEASE_BRANCH_NAME }}

    - name: Maven release PREPARE
      shell: bash
      run: |
          mvn -B release:prepare -Dgpg.keyname=${{ inputs.GPG_KEY_ID_GITHUB_TECHUSER }}

    - name: Maven release PERFORM
      shell: bash
      env:
        USERNAME: ${{ inputs.TECH_USER_USERNAME }}
        PASSWORD: ${{ inputs.TECH_USER_PASSWORD }}
      run: mvn -B release:perform -Dgpg.keyname=${{ inputs.GPG_KEY_ID_GITHUB_TECHUSER }} -s $GITHUB_WORKSPACE/${{ inputs.SETTINGS_XML_PATH}}

    - name: Checkout main/master
      if: ${{steps.precheck.outputs.VERSION_TYPE}} == 'MAJOR'
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref_name }}

    - name: Create bump version branch
      if: ${{steps.precheck.outputs.VERSION_TYPE}} == 'MAJOR'
      id: createBumpBranch
      shell: bash
      run: |
        git checkout -b ${{ steps.prepare.outputs.MR_BRANCH_NAME }} refs/remotes/origin/${{ github.ref_name }}
        git push --set-upstream origin ${{ steps.prepare.outputs.MR_BRANCH_NAME }}
        echo "${{ steps.prepare.outputs.MR_BRANCH_NAME }} branch created."

    - name: Checkout bump version branch
      if: ${{steps.precheck.outputs.VERSION_TYPE}} == 'MAJOR'
      uses: actions/checkout@v4
      with:
        ref: ${{steps.prepare.outputs.MR_BRANCH_NAME}}

    - name: Create bump MAJOR version branch
      if: ${{steps.precheck.outputs.VERSION_TYPE}} == 'MAJOR'
      id: bumpbranch
      shell: bash
      run: |
        NEXT_MASTER_VERSION=$(echo  ${{steps.prepare.outputs.SCM_TAG}} |  awk -F'.' '{print $1"."$2+1"."0}' |  sed s/[.]$//)
        TARGET_BRANCH_NEXT_VERSION=$(echo $NEXT_MASTER_VERSION | rev | cut -d '-' -f1 | rev)-SNAPSHOT
        mvn -B release:update-versions -DdevelopmentVersion=$TARGET_BRANCH_NEXT_VERSION
        
        COMMIT_MESSAGE="Bump version to $TARGET_BRANCH_NEXT_VERSION"
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE"
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
        
        git add .
        git commit -a -m "$COMMIT_MESSAGE"
        git push --atomic origin ${{steps.prepare.outputs.MR_BRANCH_NAME}}
        echo next version on ${{ github.ref_name }} is $TARGET_BRANCH_NEXT_VERSION

    # This step creates a pull request between the current branch and the base branch.
    - name: Create Pull Request
      if: ${{steps.precheck.outputs.VERSION_TYPE}} == 'MAJOR'
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        gh pr create --base ${{ github.ref_name }} --fill-verbose --title '${{steps.bumpbranch.outputs.COMMIT_MESSAGE}}'
